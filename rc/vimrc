" https://github.com/Shougo/dein.vim
" dein.vim, a dark powered Vim/Neovim plugin manager
"dein Scripts-----------------------------
if &compatible
    set nocompatible          " Be iMproved
endif

" set the runtime path to include dein.vim and initialize
" Required:
let plugin_path = '~/.vim/bundle' " for linux
" let plugin_path = '$USERPROFILE/vimfiles/bundle' " for windows

let dein_path = plugin_path.'/dein.vim'

" Required:
let &rtp.=','.dein_path

" Required:
if dein#load_state(plugin_path)
    call dein#begin(plugin_path)

    " let dein manage dein
    " Required:
    call dein#add(dein_path)

    " Add or remove your plugins here:

    " NERDtree, a filesystem explorer
    call dein#add('scrooloose/nerdtree')

    " Fugitive allows use git in vim
    call dein#add('tpope/vim-fugitive')

    " more character information for 'ga' or ':ascii'
    call dein#add('tpope/vim-characterize')

    " html5, HTML5 + inline SVG omnicomplete funtion, indent and syntax for Vim
    call dein#add('othree/html5.vim')

    " vim-airline, Lean & mean status/tabline for vim that's light as air.
    call dein#add('vim-airline/vim-airline')

    " the official theme repository for vim-airline.
    call dein#add('vim-airline/vim-airline-themes')

    " Syntastic, Syntax checking hacks for vim
    call dein#add('scrooloose/syntastic')

    " Surround provides mappings to easily delete, change and add surroundings in
    " pairs : parentheses, brackets, quotes, XML tags, and more
    call dein#add('tpope/vim-surround')

    " Python-mode contains all you need to develop python applications in Vim.
    call dein#add('klen/python-mode')

    " Jedi-vim, a VIM binding to the autocompletion library Jedi.
    " have to install jedi : pip install jedi
    call dein#add('davidhalter/jedi-vim')

    "vim-virtualenv
    call dein#add('jmcantrell/vim-virtualenv')

    " vim-indent-guides, a plugin for visually displaying indent levels in Vim.
    call dein#add('nathanaelkane/vim-indent-guides')

    " JavaScript bundle for vim, this bundle provides syntax and indent plugins.
    " it has bug on older than vim 7.4 patch 1-7
    " call dein#add('pangloss/vim-javascript')

    " UltiSnips is the ultimate solution for snippets in Vim. It has tons of
    " features and is very fast.
    " call dein#add('SirVer/ultisnips')

    " Snippets
    call dein#add('honza/vim-snippets')

    " YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine
    " for Vim.
    " call dein#add('Valloric/YouCompleteMe')

    " To use tab both YouCompleteMe and UltiSnips
    call dein#add('ervandew/supertab')

    call dein#add('naseer/logcat')

    " Run your favorite search tool from Vim, with an enhanced results list.
    call dein#add('mileszs/ack.vim')

    " This is a Vim plugin that provides Rust file detection, syntax highlighting,
    " formatting, Syntastic integration, and more.
    call dein#add('rust-lang/rust.vim')

    " Syntax highlighting for TOML
    call dein#add('cespare/vim-toml')

    " You can specify revision/branch/tag.
    " call dein#add('Shougo/vimshell', { 'rev': '3787e5' })"

    " Required:
    call dein#end()
    call dein#save_state()
endif
" Required:
filetype plugin indent on
syntax enable
" If you want to install not installed plugins on startup.
"if dein#check_install()
"    call dein#install()
"endif
"
"End dein Scripts-------------------------


"encoding
set fencs=ucs-bom,utf-8,cp949

"스페이스 사용
set backspace=eol,start,indent

"줄 번호 표시
set number "set nu

"줄 번호 표시 너비 설정
set nuw=5

"탭 크기 설정
set ts=4
set sw=4

set softtabstop=4
set shiftwidth=4

"자동 줄바꿈 안함
"set nowrap

"자동 줄바꿈 사용
set wrap

"마지막 편집 위치 복원 기능
"au BufReadPost *
"\if line("'\"")>0 && line("'\"") <= line("$") |
"\ exe "norm g'￦"" |
"\endif

"새로 추가된 괄호 짝 보여주기
set sm

"검색어 강조
set hlsearch "set hls

"검색시 대소문자 구별 안함
set ignorecase "set ic


set autoindent
set visualbell
set cindent
set smartindent

set incsearch
syntax on

"파일 확장자에 따른 차별 옵션
filetype on
filetype plugin indent on


set background=dark
colorscheme ir_black
set history=1000
set showmatch

set expandtab

set noignorecase

"긴 줄을 화면에 보이는 대로 이동
map k gk
map j gj
map <up> gk
map <down> gj
imap <up> <c-o>gk
imap <down> <c-o>gj

autocmd FileType ocaml set makeprg=ocaml\ -init\ %

" for python code auto convert tab to 4 space
"   expandtab : Insert several space when tab key is pressed. You can enter a
"             real tab character use Ctrl+V<Tab>
"   tabstop : How many spaces in one tab
"   shifhtwidth : for indentation
"   softtabstop : to remove spaces at once
"   retab : convert all tabs in file according to setting
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype python retab

autocmd Filetype html setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype htmldjango setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype javascript setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype css setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd Filetype sql setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype markdown setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" for clash
autocmd Filetype cpp setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

language en_US.UTF-8
let g:Powerline_symbols = 'fancy'
set laststatus=2

" for syntastic
" no js doc error : 아래 줄이 되어야 하는데 안돼서 그 밑의 인자로 함
" let g:syntastic_javascript_gjslint_args=" --nojsdoc"
let g:syntastic_javascript_gjslint_args = " --disable 0220"
let g:syntastic_check_on_open = 1
let g:syntastic_javascript_checkers = ['gjslint']
let g:syntastic_python_checkers = []
" for c++11
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'

" for NERD Tree
"" press ctrl + n to toggle NERD Tree
map <C-n> :NERDTreeToggle<CR>
"" auto close vim if the only window left open is a NERD Tree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" for python-mode
let g:pymode_lint = 1
let g:pymode_lint_on_write = 1
let g:pymode_lint_ignore = "E501,W"
let g:pymode_rope_completion = 0
let g:pymode_lint_cwindow = 0
let g:pymode_options_colorcolumn = 0

" python-mode
" from https://github.com/davidhalter/jedi-vim/issues/196#issuecomment-25234295
let g:pymode_virtualenv=1 " Auto fix vim python paths if virtualenv enabled
let g:pymode_folding=0  " Disable python folding
let g:pymode_utils_whitespaces=0  " Do not autoremove unused whitespaces
map <Leader>rgd :call RopeGotoDefinition()<CR>
map <Leader>pl :PyLint<CR>
let ropevim_enable_shortcuts=1
let g:pymode_rope_goto_def_newwin="vnew"
let g:pymode_rope_extended_complete=1
let g:pymode_syntax=1
let g:pymode_syntax_builtin_objs=1
let g:pymode_syntax_builtin_funcs=1
let g:pymode_lint_minheight = 5   " Minimal height of pylint error window
let g:pymode_lint_maxheight = 15  " Maximal height of pylint error window
let g:pymode_lint_write = 0  " Disable pylint checking every save
let g:pymode_run_key = "<Leader>run"  " default key conflicts with jedi-vim
let g:pymode_lint_mccabe_complexity = 10
let g:pymode_lint_checker="pyflakes,pep8,pep257,mccabe"
let g:pymode_syntax_highlight_self=1  " do not highlight self
let g:pymode_rope_vim_completion=0  " use jedi-vim for completion
let g:pymode_rope_guess_project=0
let g:pymode_doc_key="<leader>k"  " used jedi-vim for help

" rope is too slow
let g:pymode_rope = 0
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_complete_on_dot = 0


" for vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=235
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237

" for connect eclim and YouCompleteMe
let g:EclimCompletionMethod = 'omnifunc'

" Disable eclim javascript validation
let g:EclimJavascriptValidate = 0

" to use tab both YouCompleteMe and UltiSnips
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

let g:UltiSnipsEditSplit="vertical"

"for vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme='bubblegum'


" for debug
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'

" for avoid conflict between YouCompleteMe and python-mode
let g:ycm_filetype_blacklist = {
	\ 'python': 1
\}

" Add the virtualenv's site-packages to vim path
if has('python')
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif

" to avoid the error when the python of vim is different from the python of
" ycmd server : The ycmd server SHUT DOWN
let g:ycm_path_to_python_interpreter = '/usr/local/bin/python'

set cursorline

" If ag is available, use it rather than ack
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" autocmd FileType python setlocal indentkeys-=<:>
" autocmd FileType python setlocal indentkeys-=:
